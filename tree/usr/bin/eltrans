#!/bin/bash
SOURCE="$0"
source /usr/lib/elive-tools/functions
EL_REPORTS="1"
el_make_environment

. gettext.sh
TEXTDOMAIN="eltrans"
export TEXTDOMAIN

# TODO: try to implement all the terminal popups to the same terminal using -into (only xterm) and tmux (to not close it accidentally), as suggested by TheTechRobo https://forum.elivelinux.org/t/proofreading-english-using-eltrans/2266/40

pwd_orig="$(pwd)"
translating_d="$HOME/Projects/translations"
translating_e17_d="${translating_d}/e17"
translating_elive_d="${translating_d}/elive"
translating_e17_worked_d="${translating_e17_d}/my_translations"
preferences_f="$HOME/.config/elive/eltrans/account"
tempdir="/tmp/.${USER}-eltrans"
tempfile="${tempdir}/tempfile-$$"
logs_err="${tempdir}/logs-err.txt"
temp_mo="${tempdir}/motemp.mo"
temp_script="${tempdir}/script.sh"

# This option inhabilite the Elive translators part, set it to "yes" if you want to use this tool ONLY for Enlightenment 17 translations
is_mode_only_e17="0"

# version of this tool, for compatibility
export eltrans_version_v="4"


rm -rf "${tempdir}"
mkdir -p "${tempdir}"

############################################################################
ui_answer_check(){
    el_debug

    if [[ "$ui_user_answered" = "cancel" ]] ; then
        if [[ -n "$EROOT" ]] ; then
            el_notify normal znes "Eltrans" "$( eval_gettext "Thanks for collaborating with the Elive translations." )"
        else
            el_notify normal "/usr/share/git-watcher/images/ttc.gif" "Eltrans" "$( eval_gettext "Thanks for collaborating with the Elive translations." )"
        fi
        exit 0
    fi

    if [[ -z "$ui_user_answered" ]] ; then
        $guitool --error --text="$( eval_gettext "Please choose an entry from the list." )"
        main
        exit
    fi
}
############################################################################
exit_error(){
    el_debug

    el_check_files "${logs_err}"

    el_error "$(cat "${logs_err}" )"
    $guitool --error --text="Error: $(cat "${logs_err}" )"

    if [[ -x "$(which languagetool)" ]] ; then
        killall languagetool 2>/dev/null || true
        killall languagetool-tray 2>/dev/null || true
    fi

    kill "$pid_guitool_counting" 1>/dev/null 2>&1 || true

    exit
}
############################################################################
exit_ok(){
    el_debug

    local message
    message="$1"

    if [[ -n "$message" ]] ; then
        $guitool --error --text="$message"
    fi

    rm -f "${logs_err}" "$tempfile"* 2>/dev/null || true
    rm -f "$lockfile"

    if [[ -x "$(which languagetool)" ]] ; then
        killall languagetool-tray 2>/dev/null
    fi

    kill "$pid_guitool_counting" 1>/dev/null 2>&1 || true

    exit 0
}

# Lock system (good one) {{{
lockfile="/tmp/.$(basename $0)-${USER}.lock"
rm -f "$lockfile"

if [[ -r "$lockfile" ]] ; then
    PROCCESS="$(cat $lockfile)"
else
    PROCCESS=" "
fi
if (ps up $PROCCESS) 1>/dev/null 2>&1 ; then
    el_error "$(basename $0) already running"
    exit
else
    echo $$ > "$lockfile"
fi

# traps needs to be after the lock verification, in order to not remove it when we are already running
trap "exit_ok" EXIT
trap "exit_error" 1 3 5 6 14 15 ERR TERM

# SET the lock file
echo "$$" > "$lockfile"


# end lock system }}}
############################################################################
dependencies_install(){
    el_debug

    local packagename _lang ui_user_answered package_dict
    _lang="$1"

    unset dependencies

    el_check_variables "_lang"


    # check and add dependencies to install
    if ! el_dependencies_check "svn" ; then
        el_array_member_add "subversion" "${dependencies[@]}" ; dependencies=("${_out[@]}")
    fi

    if ! el_dependencies_check "xgettext" ; then
        el_array_member_add "gettext" "${dependencies[@]}" ; dependencies=("${_out[@]}")
    fi

    if ! el_dependencies_check "scite" ; then
        el_array_member_add "scite" "${dependencies[@]}" ; dependencies=("${_out[@]}")
    fi

    # this dont works anymore on buster, remove dependency
    #if ! el_dependencies_check "languagetool" ; then
        #el_array_member_add "languagetool" "${dependencies[@]}" ; dependencies=("${_out[@]}")
    #fi
    if ! el_dependencies_check "poeditor" ; then
        el_array_member_add "poedit" "${dependencies[@]}" ; dependencies=("${_out[@]}")
    fi

    # spell package
    # FIXME: wee need to add something in our conf file to say "yes, it is already installed", this check is not enough
    if ! LC_ALL=C grep -q "myspell_installed: ${_lang}" "${preferences_f}" ; then
        if ! dpkg -l | LC_ALL=C grep -qsE "^(ii|hi).*myspell-${_lang}" ; then

            package_dict="$( apt-cache search myspell-${_lang} | LC_ALL=C grep "^myspell" | LC_ALL=C grep -v "myspell-en-" )"
            if [[ -n "$package_dict" ]] ; then
                ui_user_answered="$( echo "$package_dict" | $guitool --list --height=320 --width=420 --text="$( eval_gettext "Select the appropriate dictionary package from this list." )" --column="$( eval_gettext "Package" )" || echo cancel )"
            fi

            if [[ -n "$ui_user_answered" ]] && [[ "$ui_user_answered" != "cancel" ]] ; then
                packagename="$(echo "$ui_user_answered" | awk '{print $1}')"
                el_array_member_add "$packagename" "${dependencies[@]}" ; dependencies=("${_out[@]}")
            fi

            # mark installed conf
            echo "myspell_installed: ${_lang}" >> "${preferences_f}"
        fi
    fi


    # install dependencies if any needed
    if [[ -n "${dependencies[@]}" ]] ; then
        el_explain 0 "installing dependencies: __${dependencies[@]}__"
        $guitool --info --text="$( eval_gettext "A few dependencies need to be installed first:" )"" $( echo "${dependencies[@]}" | tr ' ' ',' | sed -e 's|,|, |g' -e 's|, $||g' )"
        el_dependencies_install "${dependencies[@]}"
    fi

}

############################################################################
instructions_show(){
    if el_flag check instructions_show ; then
        return
    fi

    help_main="How to use Eltrans
==============
- Every line includes a message, click on them and it will appear in 'Source language', the 'Translation' box will be your translated equivalent to that sentence
- Sometimes the sentences include strange codes like '%s', it's important to NOT alter these elements since they are part of the source code of the application, doing it will make the application work incorrectly
- Use the listed hotkeys as much as possible, like Ctrl + Enter to save the sentence and going to the next sentence.
- Save the file and send your translations if they are correct, every 30 minutes is a suggested number to avoid conflicts with other translators.
- 'Needs Work' sentences (named fuzzy, may be shown in orange) are sometimes pre-translations or simply not verified by humans, they just need a revision to mark it as correct or a small modification to make them understandable or correctly spoken. When they are revised press Ctrl + Enter to mark it as valid and going to the next one.
- Use the Clean feature if you want to delete your state and download unmodified by you, and updated translations.

Conflicts with other Translators
============================
If you have a conflict in your file it means that more than one person worked at the same time in the same file. This tool should feature an automated way to fix them, but is important to understand why this happens and how it works, for example:
- msgid is an original sentence, msgstr is the translation to that sentence
- comments include information, like 'fuzzy' is the mark that means 'Needs Work'

Original Messages
===============
The original messages could be not spelled correctly or are not clear to understand. They need to be as short as possible without losing important information. If they need to be improved this can be done from the Proofreading step (translating to English)

If you are translating to another language and the English original message is wrong, don't translate it, instead run again Eltrans and fix it by 'translating to English'. It is very important to have the original sentences well-spoken.

Grammar Checking
===============
There are some tips you can use to improve the grammar:
- Paste the contents in google translator, check the automated translation to another language to see if your original sentence has correct grammar and structure.
- You can also use a grammar checking browser plugin (or website), like Sapling or Grammarly.

English proofreading:
=================
The English improvement of messages requires to verify and optimize each sentence to be the most optimal and short possible, and using the best grammar to automatically translate them, that we have a special technique to follow:
- Open google translator and select to translate to a common language like Spanish or French.
- Paste the contents of the sentence, and start modifying it to be the shortest and clear as possible, while verifying that the equivalent translation is making correctly.
- If google translator doesn't translate it correctly, change your sentence using different words or compositions until it translates correctly, then you obtained the best sentence that we need to use.

Important notes:
==============
  - Words wrongly translated, like 'kernel' sometimes are wrongly translated, using caps like Kernel or KERNEL makes it correctly translated.
  - Using 'computer' or 'machine' has different translations, you should use the synonym that better creates the automated translation.
  - If the original message is just correct, you can recyclate it fastly pressing 'Ctrl + b'
"

    echo "$help_main" | $guitool --text-info --title="How to use eltrans" --width=540 --height=500 1>/dev/null &

    el_flag add instructions_show

}
############################################################################
preferences_edit(){
    el_debug

    local newpass newuser
    el_check_variables "preferences_f"

    mkdir -p "${preferences_f%/*}"
    touch "$preferences_f"

    pref_user_cached_v="$( cat "$preferences_f" | LC_ALL=C grep "username" | sed 's/^.*:://g' )"
    pref_pass_cached_v="$( cat "$preferences_f" | LC_ALL=C grep "password" | sed 's/^.*:://g' )"

    #$guitool --info --text="$( eval_gettext "To collaborate with Elive making translations, you need to create yourself an account in https://www.elivecd.org/collaborate\n\nThanks a lot for your collaboration" )"
    ui_user_answered="$( $guitool --entry --title="$( eval_gettext "Elive translator account" )" --text="$( eval_gettext "Enter the user name of your Elive translator account" )" --entry-text="$pref_user_cached_v" || echo cancel )"
    ui_answer_check
    newuser="$ui_user_answered"

    ui_user_answered="$( $guitool --password --title="$( eval_gettext "Elive translator account" )" --text="$( eval_gettext "Enter the password of your Elive translator account" )" || echo cancel )"
    ui_answer_check
    newpass="$ui_user_answered"

    if el_check_variables "newuser|newpass" ; then
        echo -e "username::${newuser}\npassword::${newpass}" > "$preferences_f"
        config_get
    else
        $FUNCNAME
    fi
}
############################################################################
select_language(){
    local ui_user_answered
    ui_user_answered="$( $guitool --entry --entry-text="${LANG%%_*}" --title="$( eval_gettext "Select language" )" --text="$translated_message" || echo cancel )"

    ui_answer_check
    language_user="$ui_user_answered"

    el_check_variables "language_user"
    verify_locale_supported "$language_user" select_language

    dependencies_install "$language_user"

    if [[ "$language_user" = "en" ]] ; then
        if ! el_flag check proofreading_warning_show ; then
            #$guitool --info --text="$( eval_gettext "Thank you for collaborating in the proofreading of the messages. In your systray you can find a grammar checker tool. If you think that the spelling of the original messages is incorrect or not giving the right information to the user, feel free to improve them. If you do not understand what a message means, ask the developers." )"
            $guitool --info --text="$( eval_gettext "IMPORTANT: The quality of the automatic pre-translations depends heavily on the grammatical and syntactical accuracy and correctness of the English text. For this, we use a special reverse-engineering trick explained in the forum. Using the Google Translator website in an inverse way, you need to examine the automated translation to a common language like Spanish or French, and modify it until the automated translation is correct. When everything looks good, use the new English message in Eltrans, if not, change a word or rewrite the sentence. This will save a lot of time for all the translators and will make the messages clearer and more understandable. More information about this technique can be found in the Forums." )"

            if ! $guitool --question --text="$( eval_gettext "Do you know already the procedure of the English proofreading method we use?" )" ; then
                web-launcher "https://forum.elivelinux.org/t/eltrans-how-to-improve-the-english-sentences-in-elive-proofreading/1055" &
            fi

            el_flag add proofreading_warning_show
        fi

        # always have a window of google translator opened:
        if ! ps ux | grep -v grep | grep -qs "web-launcher.*translate.google.com" ; then
            el_notify normal gtranslator "Google Translator" "$( eval_gettext "Do not close the google-translator window. You should follow the proofreading method that we use to proofread the Elive messages." )"
            # always run a web browser with google translator since its the needed tool to use for it
            web-launcher --incognito --app="https://translate.google.com" &
        fi
    fi

}
############################################################################
translate_elive(){
    el_debug

    local is_base_translation_avail _tr_app_d _tr_package_version_v

    _tr_app_d="$1"
    el_check_variables "_tr_app_d"

    if ! el_check_dirs "$_tr_app_d" ; then

        local translated_message
        translated_message="$( printf "$( eval_gettext "The directory %s does not exist." )" "${_tr_app_d}" )"

        $guitool --warning --text="$translated_message"

        translate_new
        exit 0
    fi

    cd "$_tr_app_d"

    # run extra apps
    if [[ -x "$(which languagetool)" ]] ; then
        if ! ps aux | LC_ALL=C grep -v grep | LC_ALL=C grep -qs "java.*languagetool.*tray" ; then
            languagetool-tray &
        fi
    fi

    mkdir -p "$_tr_app_d/tmp"

    if [[ -f "$_tr_app_d/${language_user%%_*}.po" ]] ; then
        cp "$_tr_app_d/${language_user%%_*}.po" "$_tr_app_d/tmp/base_translation.po"
        is_base_translation_avail=1
    fi

    if [[ -f "$_tr_app_d/${language_user}.po" ]] ; then
        cp "$_tr_app_d/${language_user}.po" "$_tr_app_d/tmp/base_translation.po"
        is_base_translation_avail=1
    fi

    if ((is_base_translation_avail)) ; then
        msgmerge --no-wrap -w 20000000 -o "$_tr_app_d/${language_user}.po" "$_tr_app_d/tmp/base_translation.po" "$_tr_app_d/default.pot"
    else
        xgettext -s --no-wrap -w 20000000 --language=PO --foreign-user --from-code utf-8 -o "$_tr_app_d/${language_user}.po" "$_tr_app_d/default.pot"
    fi

    sed -i '/Content-Type/s/charset=.*$/charset=UTF-8\\n"/' "$_tr_app_d/${language_user}.po"

    rm -rf "$_tr_app_d/tmp"


    # count english proofreading
    count_messages_completed "$_tr_app_d/en.po"

    if [[ "$count_percent_translate_v" -lt "90" ]] ; then

        if [[ "${language_user}" = "en" ]] ; then
            if ! echo "$pref_user_cached_v" | grep -qsiE "(Thanatermesis)" ; then

                $guitool --error --text="$( eval_gettext "Sorry! Translations require at least 90% of their original messages verified. We do this to ensure the good quality of the messages and the strict use of our special technique. You can found more details in our Forums." )"
                # do not translate this one
                return 0
            fi
        else
            #$guitool --warning --text="$( eval_gettext "In this translation less than 90% of the original messages have been proofread. If you have good English skills, please proofread them. We suggest to translate another application for now. Otherwise you risk doing the translation twice, since the proofreading may result in different message texts." )"
            $guitool --warning --text="$( eval_gettext "Sorry! This translation has less than the 90% of its original messages verified, we need to wait for a better proofreading first, otherwise our translating work will be lost later. In the meantime, you can select another application to translate." )"

            if $guitool --question --text="$( eval_gettext "If you have good English skills, and you also know natively another common language like French or Spanish. You can help improving the English sentences using our mystical reverse-engineering method. Do you want to know more about it?" )" ; then
                web-launcher "https://forum.elivelinux.org/t/eltrans-how-to-proofread-the-original-messages-of-elive/1055" &
            fi

            # do not translate this one
            return 0
        fi
    fi

    # recent changes in last 3 days:
    recent_changes_diffed="$( svn diff --non-interactive --username "$pref_user_cached_v" --password "$pref_pass_cached_v" -r "{$(date --date="3 day ago" +%F)}:BASE" "$_tr_app_d/${language_user}.po" 2>/dev/null | colors-remove | grep -vE "(^---|^\+\+\+|Creation-Date: |Project-Id-Version: |\"Language: |Content-Type: text/plain; |^#.*fuzzy|^#.*sh-format)" | grep -E "(^-|^\+)" | grep "^+msgstr " )"
    recent_changes_authors="$( svn log -v --non-interactive --username "$pref_user_cached_v" --password "$pref_pass_cached_v" -r "{$(date --date="3 day ago" +%F)}:BASE" "$_tr_app_d/${language_user}.po" 2>/dev/null | colors-remove | grep -E "^r[[:digit:]]+ " | awk '{print $3}' | sort -u | grep "[[:alnum:]]" | tr '\n' ' ' )"
    read -r recent_changes_authors <<< "$recent_changes_authors"

    # if somebody also edited the same translation in the last 3 days, tell the translator about it
    if [[ -n "$recent_changes_diffed" ]] ; then
        # only me? ignore...
        if [[ "$recent_changes_authors" != "Thanatermesis" ]] ; then
            $guitool --warning --text="$( eval_gettext "The file that you want to translate, has been modified in the last 3 days by other collaborators. You should not worry about this message and is only a notification to know about that other translator worked recently on the same file in order to avoid possible conflicts between versions translated.\n\nThese translators was:" ) '$recent_changes_authors' "

            if ! $guitool --question --text="$( eval_gettext "Do you want to continue editing this translation? Otherwise, you can select another application to translate" )" ; then
                return 0
            fi
            fi
            fi


            count_messages_completed "$_tr_app_d/${language_user}.po"

            if [[ "$count_msg_fuzzy_v" -ge "10" ]] ; then
                el_notify normal gtranslator "$( eval_gettext "Suggestion" )" "$( eval_gettext "Tip: If there are messages needing an update ('Needs Improvement' type), but they are correctly translated, you can press Ctrl + Enter to mark it as valid." )"
            fi

    #
    # HOOKS pre
    #

    # for the translator tools
    _tr_package_version_v="$( LC_ALL=C grep "Project-Id-Version: " "${_tr_app_d}/default.pot" | sed -e 's|^.*Version: ||g' -e 's|\\n.*$||g' | head -1 | LC_ALL=C grep "[[:digit:]]" )"
    : ${_tr_app_d:="1.0"}

    sed -i "/\"Project-Id-Version: /s|^.*Version:.*$|\"Project-Id-Version: ${_tr_package_version_v}\\\n\"|g" "$_tr_app_d/${language_user}.po"

    if ! ((is_instructions_show)) ; then
        instructions_show
        is_instructions_show=1
        sleep 1
    fi

    #
    # FIXES pre
    #
    sed -i '/msgstr ""[^[:blank:]]/s|msgstr ""*|msgstr "|g' "$_tr_app_d/${language_user}.po"

    # run poedit
    local message_saving_translation_submit
    message_saving_translation_submit="$( printf "$( eval_gettext "To send your translations made to Elive. Save your editing and close the Poedit application when you have finished. " )" "" )"

    ( sleep 30 ; source /usr/lib/elive-tools/functions ; el_notify normal logo-elive "Eltrans Saving" "${message_saving_translation_submit}" ) &
    poeditor "$_tr_app_d/${language_user}.po"

    #
    # FIXES post
    #
    sed -i '/msgstr ""[^[:blank:]]/s|msgstr ""*|msgstr "|g' "$_tr_app_d/${language_user}.po"

    # why fuck always all the applications are buggy ? im tired to fix things everywhere
    sed -i "/\"Project-Id-Version: /s|^.*Version:.*$|\"Project-Id-Version: ${_tr_package_version_v}\\\n\"|g" "$_tr_app_d/${language_user}.po"

    # remove wraps
    msgattrib --no-wrap -w 20000000 -o "$_tr_app_d/${language_user}-new.po" "$_tr_app_d/${language_user}.po"
    mv -f "$_tr_app_d/${language_user}-new.po" "$_tr_app_d/${language_user}.po"


    rm -f "$_tr_app_d/${language_user}.mo"

    translation_elive_install "$( basename $_tr_app_d )" "$_tr_app_d/${language_user}.po" "$language_user"
    commit_changes_elive "$( basename $_tr_app_d )" "${language_user}.po" "$_tr_app_d" "${language_user}"
}
############################################################################
translation_elive_install(){
    el_debug

    local _tr_app _tr_po _tr_lang svndiff
    _tr_app="$1"
    _tr_po="$2"
    _tr_lang="$3"

    el_check_variables "_tr_lang|_tr_po|_tr_app"
    el_check_files "${_tr_po}"

    svndiff="$( svn diff --non-interactive --username "$pref_user_cached_v" --password "$pref_pass_cached_v" | colors-remove | grep -vE "(^---|^\+\+\+|Creation-Date: |Project-Id-Version: |\"Language: |Content-Type: text/plain; |^#.*fuzzy|^#.*sh-format)" | grep -E "(^-|^\+)" || true )"

    if [[ -n "$svndiff" ]] ; then
        if $guitool --question --text="$( eval_gettext "Install and use your translation in your system now? It is suggested to test yourself the made translations before to send them to Elive in order to verify that everything looks correct and consistent." )" ; then

            if ! [[ -d "/usr/share/locale/${_tr_lang%%.*}/LC_MESSAGES" ]] ; then
                gksu "mkdir -p /usr/share/locale/${_tr_lang%%.*}/LC_MESSAGES"
            fi

            #msgfmt ${_tr_po} -o /tmp/.$(basename $0)-${USER}-${_tr_app}.mo


            if gksu "msgfmt ${_tr_po} -o /usr/share/locale/${_tr_lang%%.*}/LC_MESSAGES/${_tr_app}.mo" ; then
                is_translation_installed=1
                $guitool --info --text="$( eval_gettext "Translation installed in your system. Make sure to close the translated application and run it again to verify the modified messages." )"
            else
                $guitool --error
            fi
        fi
    fi

}
############################################################################
config_get(){
    pref_user_cached_v="$( cat "$preferences_f" | LC_ALL=C grep "username" | sed 's/^.*:://g' )"
    pref_pass_cached_v="$( cat "$preferences_f" | LC_ALL=C grep "password" | sed 's/^.*:://g' )"

    #if [[ -z "$pref_user_cached_v" ]] || [[ -z "$pref_pass_cached_v" ]] ; then
        #preferences_edit
    #fi
}
############################################################################
commit_changes_elive(){
    el_debug

    local _tr_app _tr_po _tr_lang _tr_app_d _tr_po_f
    _tr_app="$1"
    _tr_po_f="$2"
    _tr_app_d="$3"
    _tr_lang="$4"

    el_check_variables "_tr_po_f"
    el_check_files "$_tr_po_f"

    # TODO: if you fix the fucking gksu issue then you can enable this back
    #if ! ((is_translation_installed)) ; then
        #local message_install_required
        #message_install_required="$( printf "$( eval_gettext "Suggestion: Please install first your translation in your system before to send it, so you can verify that works correctly." )" )"

        #$guitool --info --text="$message_install_required"
    #fi

    if ! $guitool --question --title="Send translations" --text="$( eval_gettext "Sending your translation to Elive is automated and every user will be benefited of it.\n\nIf you don't have an account yet, check our forums for more information\n\nYou should not wait too long to send your translation. Someone else may work on the same messages, and the resulting versions may not be compatible. When you have finished translating some messages, send them right away. Only translated messages willl be included in the application.\n\nPlease only send grammatically correct messages. If necessary, change the English message texts.\n\nSend translations now?" )" ; then
        return 0
    fi

    if ! el_check_files "$preferences_f" ; then
        preferences_edit
    fi

    cd "$_tr_app_d"

    rm -f "${temp_mo}"

    msgfmt -f -v --statistics -c "$_tr_po_f" -o "${temp_mo}" 2>&1 \
        | grep -v "^msgfmt: " \
        | grep -v "msgid.*msgstr.*\"\\\n\"$" \
        | grep -v ":6: " \
        | grep -vE "\.po.*: .*(translated message|fuzzy translation|untranslated message)*.*$" \
        | grep "\.po:" \
        > "${logs_err}"

    # only send translations in utf-8 mode
    if ! grep -iq "Content-Type:.*charset=UTF-8" "$_tr_po_f" && [[ "$language_user" != "en" ]] ; then
        echo "$( eval_gettext "Translated file does not appear to be in UTF-8 mode." )" >> "${logs_err}"
        echo "$( eval_gettext "The charset must be UTF-8." )" >> "${logs_err}"
        echo "$( eval_gettext "Try to change your editor setting to UTF-8." )" >> "${logs_err}"
    fi

    if [[ -s "${logs_err}" ]]; then
        $guitool --info --text="$( eval_gettext "There are warnings or errors in your translation. Please read them carefully and try to fix the problem manually. there is a window with the details of these errors. The messages include the exact line number of the problem in the first field. Enable line-number- visualization in your editor if it is not enabled." )"

        cat "${logs_err}" | $guitool --text-info --width=650 --height=400 &

        scite "$_tr_po_f"

        rm -f "${logs_err}"
    fi
    #}

    rm -f "${temp_mo}" "${logs_err}"

    # note: do not add, otherwise a conflicting file could be sent probably
    #el_debug "svn add '${_tr_po_f}'"
    #svn add "${_tr_po_f}"  2>/dev/null || true

    for blklisted in "$( curl http://main.elivecd.org/tmp/blklisted-translators 2>/dev/null )"
    do
        [[ -z "$blklisted" ]] && continue
        el_debug "blklisted translator: $blklisted"
        [[ "$pref_user_cached_v" = "$blklisted" ]] && is_blklist=1
    done

    local message_error_sending_translations
    message_error_sending_translations="$( printf "$( eval_gettext "Error sending your translation. If you are using a Wrong Username or Password please remove the file '%s', you can also try the 'Clean' option. But if you have important work saved, first do a backup of your directory '%s' and use meld with it and your backup after you have made Eltrans working again" )" "$preferences_f" "$translating_elive_d" )"

    if ((is_blklist)) ; then
        $term -e bash -c "sleep 2"
        $guitool --info --text="Translation sent sucessfully, Thanks a lot for your collaboration, it can be reviewed soon and included directly on Elive the next time."

    else
        cat > "${temp_script}" << EOF
#!/bin/bash

if svn commit --non-interactive --username "$pref_user_cached_v" --password "$pref_pass_cached_v" -m "Eltrans commit:  |${_tr_app}|  in  |${_tr_lang}|  by '$( awk -v var="$pref_user_cached_v" "BEGIN {print tolower(var)}" )'" 2>"${logs_err}" "${_tr_po_f}"  ; then

    $guitool --info --text="$( eval_gettext "Translation sent sucessfully. Thank you for your collaboration. It will be examined soon and included directly in Elive's next version. You can see your translation on http://dev.elivecd.org/timeline, where you can also look at other translations made by someone else. You can also see there who made the translation, look at the differences or recover an older translation if necessary." )" 1>/dev/null 2>&1

else
    $guitool --error --text="$message_error_sending_translations" 1>/dev/null 2>&1
fi

EOF
        chmod +x "${temp_script}"
        $term -e "${temp_script}"
        rm -f "${temp_script}"

        if [[ -s "${logs_err}" ]]; then
            cat "${logs_err}" | $guitool --text-info --width=650 --height=400
            rm -f "${logs_err}"
            # move translation for a possible review
            mkdir -p /tmp/translations-${USER}-$$/
            mv -f "${_tr_po_f}" /tmp/translations-${USER}-$$/
            $guitool --warning --text="$( eval_gettext "Your conflicting translation has been deleted in order to download a new clean copy the next time you run Eltrans. If you want to recover manually or merge it using the Meld tool, you can find it on the directory: " ) /tmp/translations-${USER}-$$/"

            exit
        fi
    fi

    # proofreaders
    #if [[ "$language_user" = "en" ]] ; then
        ## FIXME: this is a temporal message hack
        #$guitool --warning --text="$( eval_gettext "Please understand this: When you proofread the english, these improved messages are directly integrated in the source code, which changes these sentences in all the other languages too, by other side, if in the future you see a conflict status in your translated files and you don't want to erase them you can try to use meld between the directories." )"
    #fi

    # last message
    if $guitool --question --text="$( eval_gettext "You can review it and other ones at:" ) http://dev.elivecd.org/timeline $( eval_gettext "View the timelines in the web browser now?" )" ; then
        web-launcher "https://dev.elivecd.org/timeline" &
    fi
}
############################################################################
add_translations_dir_e17(){
    el_debug

    el_check_variables "translating_d|translating_e17_worked_d"

    mkdir -p "${translating_d}"
    cd "$translating_d"

    rm -rf e
    rm -rf "$translating_e17_d" 2>/dev/null

    $term -e bash -c "echo 'Download Enlightenment 17 sources...' ; svn co http://svn.enlightenment.org/svn/e/trunk/e || sleep 6"

    mkdir -p "$translating_e17_d"
    mv e "$translating_e17_d/svn"

    mkdir -p "$translating_e17_worked_d"
}
############################################################################
add_translations_dir_elive(){
    el_debug

    el_check_variables "translating_d"

    dependencies_install "${LANG%%_*}"

    mkdir -p "$translating_d"
    cd "$translating_d"
    rm -rf elive

    cat > "${temp_script}" << EOF
#!/bin/bash
echo 'Downloading translations...'

svn --non-interactive --username "${pref_user_cached_v}" --password "${pref_pass_cached_v}" co svn://dev.elivecd.org/translations elive 2>"${logs_err}" || sleep 2
EOF
    chmod +x "${temp_script}"
    $term -e "${temp_script}"
    rm -f "${temp_script}"

    if [[ -s "${logs_err}" ]]; then
        $guitool --error --text="$( eval_gettext "We cannot download the translations. If you don't have a translator account, you need to request it to Thanatermesis, contact him from the Elive website. If your account is valid, maybe there's issues with the server and you should try again later." )"
        cat "${logs_err}" | $guitool --text-info --width=650 --height=400
        rm -f "${logs_err}"

        preferences_edit
        $FUNCNAME
    fi

}
############################################################################
update_translations(){
    el_debug

    local conflicted_file_f

    # update e17 translations dir
    #if [[ -d "$translating_e17_d" ]] && [[ -d "$translating_e17_d/svn" ]] && [[ -d "$translating_e17_worked_d" ]] ; then
    #cd "$translating_e17_d/svn"
    #$term -e bash -c "echo 'Updating...' ; svn update || { svn cleanup ; svn update || sleep 10 ; } "
    #else

    #add_translations_dir_e17
    #fi

    #if ! [[ "$mode_only_e17_v" = "yes" ]] ; then
    if [[ -d "$translating_d/elive" ]] ; then

        cd "${translating_d}/elive"

        rm -rf "/tmp/${USER}-translations-eltrans"
        cp -r "${translating_d}/elive" "/tmp/${USER}-translations-eltrans"

        cat > "${temp_script}" << EOF
#!/bin/bash
echo "Cleaning..."
svn cleanup
echo

echo "Updating..."
LC_ALL=C timeout 120 svn update --non-interactive --username "${pref_user_cached_v}" --password "${pref_pass_cached_v}" --accept theirs-full 2>&1 | tee "${logs_err}"
EOF
        chmod +x "${temp_script}"
        $term -e "${temp_script}"
        rm -f "${temp_script}"


        #if ! svn update ; then
        ## clean it up if something has failed
        #cd ../../
        #add_translations_dir_elive
        #fi

        # note: logs_err are not errors really but mostly messages to parse
        if grep -qsE "^\s+G" "${logs_err}" ; then

            conflicted_file_f="$( grep -E "^\s+G" "${logs_err}" | awk '{print $2}' | tr '\n' ' ')"


            local translated_message
            translated_message="$( printf "$( eval_gettext "IMPORTANT: There was an update of the file '%s' that conflicted with your version. It was removed so that Eltrans can work correctly. If you had on it an old translation that you do not want to lose, you can use with caution the tool '%s', to compare and merge the contents, it's important to respect the correct structure of these files and especially to keep the same newline characters on them. If you want to do that, close now Eltrans and run this command, after, start Eltrans again and send your translation. The command is:" )" "${conflicted_file_f}" "meld" )\n\nmeld /tmp/${USER}-translations-eltrans ${translating_d}"

            $guitool --warning --text="${translated_message}"

            unset conflicted_file_f
        fi

        rm -f "${logs_err}"
    else
        add_translations_dir_elive
    fi
    #fi

    el_check_dirs "$translating_d"
    cd "${translating_d}"

    #xgettext -C --foreign-user -k -k_ -kd_ -kD_ -o enlightenment.pot "$(find "${translating_e17_d}/svn" -name "*.[ch]" -print)" -p "$translating_e17_worked_d" --from-code utf-8

    el_check_dirs "$pwd_orig"
    cd "$pwd_orig"
}
############################################################################
translate_e17_new_language(){
    el_debug

    local is_base_translation_avail edited
    el_check_dirs "${translating_e17_d}"

    cd "${translating_e17_d}"


    ui_user_answered="$( $guitool --entry --entry-text="${LANG%%_*}" --title="$( eval_gettext "Select language" )" --text="$translated_message" || echo cancel )"

    ui_answer_check
    language_user="$ui_user_answered"

    verify_locale_supported "$language_user" translate_e17_new_language
    dependencies_install "$language_user"

    if [[ -f "$translating_e17_worked_d/${language_user}.po" ]] ; then
        ui_user_answered="$( $guitool --list --text="$( eval_gettext "Old translation found. Select an option:" )" --column="" --column="$( eval_gettext "Option" )" 1 "$( eval_gettext "Edit a previously made translation" )" 2 "$( eval_gettext "Remove it and create a new one" )" || echo cancel )"
        ui_answer_check

        case "$ui_user_answered" in
            1)
                #mv $translating_e17_worked_d/${language_user}.po $translating_e17_worked_d/${language_user}.old.po
                msgmerge -U "$translating_e17_worked_d/${language_user}.po" "$translating_e17_worked_d/enlightenment.pot"
                #rm $translating_e17_worked_d/${language_user}.old.po

                poeditor "$translating_e17_worked_d/${language_user}.po"

                if ! grep -iq "Elive Translation tool" "$translating_e17_worked_d/${language_user}.po" ; then
                    sed -i "3a# \n# This translation was created/edited with the Elive translation tool" "$translating_e17_worked_d/${language_user}.po"
                fi

                edited=1
                ;;
            2)
                rm -f "$translating_e17_worked_d/${language_user}.po"

                ;;
        esac
    fi

    if ! ((edited)) ; then

        mkdir -p "$translating_e17_worked_d/tmp"

        if [[ -f "${translating_e17_d}/svn/po/${language_user%%_*}.po" ]] ; then
            cp "${translating_e17_d}/svn/po/${language_user%%_*}.po" "$translating_e17_worked_d/tmp/base_translation.po"
            is_base_translation_avail=1
        fi
        if [[ -f "${translating_e17_d}/svn/po/${language_user}.po" ]] ; then
            cp "${translating_e17_d}/svn/po/${language_user}.po" "$translating_e17_worked_d/tmp/base_translation.po"
            is_base_translation_avail=1
        fi

        if ((is_base_translation_avail)) ; then
            msgmerge -o "$translating_e17_worked_d/${language_user}.po" "$translating_e17_worked_d/tmp/base_translation.po" "$translating_e17_worked_d/enlightenment.pot"
        else
            cp "$translating_e17_worked_d/enlightenment.pot" "$translating_e17_worked_d/${language_user}.po"
        fi

        rm -rf "$translating_e17_worked_d/enlightenment.pot" "$translating_e17_worked_d/tmp"

        poeditor "$translating_e17_worked_d/${language_user}.po"

        if ! grep -iq "Elive Translation tool" "$translating_e17_worked_d/${language_user}.po" ; then
            sed -i "3a# \n# This translator was created/edited with the Elive translation tool" "$translating_e17_worked_d/${language_user}.po"
        fi
    fi

    rm -f "$translating_e17_worked_d/${language_user}.mo"

    #translation_e17_install "$translating_e17_worked_d/${language_user}.po"
}
############################################################################
#translation_e17_install(){
    #el_debug

    #local _translated_po
    #_translated_po="$1"
    #el_check_variables "_translated_po"

    #if $guitool --question --text="$( eval_gettext "Do you want to try your translation now ?" )" ; then

        #if ! [[ -d /usr/share/locale/${language_user%%.*}/LC_MESSAGES ]] ; then
            #gksu "mkdir -p /usr/share/locale/${language_user%%.*}/LC_MESSAGES"
        #fi

        #gksu "msgfmt \"${_translated_po}\" -o /usr/share/locale/${language_user%%.*}/LC_MESSAGES/enlightenment.mo"

        #enlightenment_remote -restart 2>/dev/null 1>&2

        #sleep 6
    #fi


    #local translated_message
    #translated_message="$( printf "$( eval_gettext "Now, you need to send your translation(s) to Enlightenment 17 developers, for that, you need to send it via email to the enlightenment-intl mailing list.\n\nYour Enlightenment 17 Translation files are located in your %s directory\n\nPress Continue to be redirected to the mailing list suscription on your web-browser.\n\nAdd a small description to the email like the language translated and the possible variant, the Operating-System, your country, and your locales value, your one is: %s" )" "$translating_e17_worked_d" "$LANG" )"

    #$guitool --info --title="$( eval_gettext "Send your translation" )" --text="$translated_message"

    #if ! /etc/alternatives/x-www-browser https://lists.sourceforge.net/lists/listinfo/enlightenment-intl 2>/dev/null 1>&2 ; then
        ## do something?
        #true
    #fi
#}
############################################################################
verify_locale_supported(){
    el_debug

    local _tr_lang _function_extra
    _tr_lang="$1"
    _function_extra="$2"

    el_check_variables "_function_extra|_tr_lang"

    if ! cat "/usr/share/i18n/SUPPORTED" | tr '.' ' ' | tr '@' ' ' | awk '{print $1}' | LC_ALL=C grep -q "${_tr_lang}"  ; then
        $guitool --error --text="$( eval_gettext "The language you selected is not supported by your system. Choose one from the list:" )""
        $( cat /usr/share/i18n/SUPPORTED | tr '.' ' ' | tr '@' ' ' | awk '{print $1}' | LC_ALL=C grep ${_tr_lang%%_*} )"

        "$_function_extra"
    fi
}
############################################################################
clean_elive_dir(){
    el_debug
     local ui_user_answered

     ui_user_answered="$( $guitool --list --width=640 --height=300 --text="$( eval_gettext "Select this option to remove your translations directory or to revert to a previous commit (Important: If you erroneously have sent a wrong translation, you have to select this option)" )" --column="$( eval_gettext "Option" )" --column="$( eval_gettext "Description" )" "Purge" "$( eval_gettext "This option removes the entire directory with your translations." )" "Account" "$( eval_gettext "Resets your username and password configurations" )" "Revert" "$( eval_gettext "This option lets you undo a wrong translation, which you sent by mistake." )" || echo cancel )"
    ui_answer_check

    case "$ui_user_answered" in
        "Account")
            rm -rf "$preferences_f"
            ;;

        "Purge")

            local translated_message
            translated_message="$( printf "$( eval_gettext "You are going to remove your translations directory (not the Enlightenment 17 translations). This will remove all the translations that you have not sent or backed up. If you like, do a backup of your '%s' directory first, and after that, continue." )" "$translating_elive_d" )"

            if $guitool --question --text="Going to delete the directory '$translating_elive_d'. Continue?" ; then
                rm -rf "$translating_elive_d"
            fi

            main
            ;;
        "Revert")

            local translated_message
            translated_message="$( printf "$( eval_gettext "If you have made a wrong translation and sent it to Elive, correct your mistake as follows: First of all, go to http://dev.elivecd.org,  log in and click on 'timeline' to see the latest changes. If you click on the commit number, you can see the actual changes made (visually). If they are incorrect, look for a previous (correct) commit. Click on 'Previous Changeset'. Now you can see the previous changes. If this one is correct, remember the revision number (because it is the one you need to use afterwards). Click on the single file link (in the left part, in the details of the changeset) or look for it in the 'Browse source' tab. When you are on this page, make sure that it is the correct revision number. Go to the bottom of the page and click on the link 'Download in Original Format'. When the download is finished, replace your local file (normally in %s) with this one and from this directory, run the command: svn commit -m 'reverting to old version'." )" "$translating_elive_d" )"

            $guitool --info --text="$translated_message"

            main
            ;;
    esac

}
############################################################################
## nobody uses that function? better to comment it then
#translation_edit(){
#el_debug

#$app_poeditor "$1"

#if ! grep -iq "Elive Translation tool" "$1" ; then
#sed -i "3a# \n# This translator was created/edited with the Elive translation tool" "$1"
#fi

#translation_e17_install "$1"
#}
############################################################################
count_messages_completed(){
    #el_debug

    #local count_msg_all_v count_msgstr_all_v
    local _tr_po _item
    _tr_po="$1"
    #_item="$2"

    # is translation file empty or not existing?
    if ! [[ -s "$_tr_po" ]] ; then
        if [[ "$_tr_po" = *"/en.po" ]] ; then
            # copy from template
            cp -f "$( dirname "$_tr_po" )/default.pot" "$_tr_po"
            el_debug "adding default english translation from 'default.pot':"
            svn add --non-interactive --username "$pref_user_cached_v" --password "$pref_pass_cached_v" "$_tr_po"
        else

            if ((is_new_language_add_wanted)) ; then
                cp -f "$( dirname "$_tr_po" )/default.pot" "$_tr_po"
                el_debug "adding default english translation from 'default.pot':"
                svn add --non-interactive --username "$pref_user_cached_v" --password "$pref_pass_cached_v" "$_tr_po"
            else
                el_error "$_tr_po doesn't exist"
                # check if language really exist:
                if cat /etc/locale.gen | grep -i UTF-8 | sed -e 's|^# ||g' -e 's| .*$||g' -e 's|\..*$||g' | sort -u | grep -qs "^${language_user}$" || cat /etc/locale.gen | grep -i UTF-8 | sed -e 's|^# ||g' -e 's| .*$||g' -e 's|\..*$||g' -e 's|_.*$||g' | sort -u | grep -qs "^${language_user}$" ; then

                    # warn the user that a new translation is going to be created
                    if echo "$language_user" | grep "_" ; then
                        $guitool --warning --text="$( eval_gettext "Warning: This is a new language translation which didn't existed previously, a sublanguage or dialect should be only used when the main language is not compatible with the messages, like when needs using different sentences or meanings, otherwise is better to simply use the main language." )"
                    else
                        $guitool --warning --text="$( eval_gettext "This is a new language which didn't existed previously for this translation, so we are going to create a new template for this type of language." )"
                    fi

                    if $guitool --question --text="$( eval_gettext "Please confirm first. Is the language identifier that you inserted the correct for your translations?" ) '$language_user'" ; then
                        cp -f "$( dirname "$_tr_po" )/default.pot" "$_tr_po"
                        el_debug "adding default english translation from 'default.pot':"
                        svn add "$_tr_po"
                        is_new_language_add_wanted=1
                    else
                        $guitool --error --text="$( eval_gettext "Please run again Eltrans selecting a different language to use." )"
                        exit 1
                    fi

                else
                    el_error "the '$language_user' language inserted by user doesn't seems to be a valid language identifier found in /etc/locale.gen"
                    $guitool --error --text="$( eval_gettext "The selected language identifier doesn't seems to exist, if you think that this is an error in Eltrans tell us about it in the forums. Please run again Eltrans selecting a different language to translate." )"
                    exit 1
                fi
            fi
        fi
    fi

    el_check_variables "_tr_po"

    unset count_percent_v count_percent_translate_v count_percent_fuzzy_v count_msg_all_v count_msgstr_all_v

    # how much messages we have?
    count_msg_all_v="$( awk 'NR<=12 { next }; { if ($0 ~ /^(# -|#~|msgid \"\")/ ){next}}; { if ($0 ~ /^msgid "/) {count++} }; END {print count}' "$_tr_po" )"
    [[ -z "$count_msg_all_v" ]] && count_msg_all_v=0

    # messages translated
    count_msgstr_all_v="$( awk 'NR<=12 { next }; { if ($0 ~ /^(# -|#~|msgstr \"\")/ ){next}}; { if ($0 ~ /^msgstr "/) {count++} }; END {print count}' "$_tr_po" )"
    [[ -z "$count_msgstr_all_v" ]] && count_msgstr_all_v=0

    # how much fuzzy's we have?
    count_msg_fuzzy_v="$( awk 'NR<=12 { next }; { if (prev ~ /^#.*fuzzy/ && $0 ~ /^msgid / ) {count++}; prev=$0 } END{print count}' "$_tr_po" )"
    #count_msg_fuzzy_v="$( awk 'NR<=12 { next }; { if ($0 ~ /^(# -|#~|msgid \"\")/ ){next}}; { if ($0 ~ /^#.*fuzzy/) {count++} }; END {print count}' "$_tr_po" )"
    [[ -z "$count_msg_fuzzy_v" ]] && count_msg_fuzzy_v=0
    # count the wrong fuzzys

    # messages with translations
    #count_msg_translated_v="$(( $count_msgstr_all_v - $count_msg_fuzzy_v ))" # fuzzy's dont count as real translations
    #[[ -z "$count_msg_translated_v" ]] && count_msg_translated_v=0

    # percent done
    count_percent_translate_v="$( echo -e "( $count_msgstr_all_v / $count_msg_all_v ) * 100" | bc -l )"
    count_percent_translate_v="${count_percent_translate_v%%.*}"

    count_percent_fuzzy_v="$( echo -e "( $count_msg_fuzzy_v / $count_msg_all_v ) * 100" | bc -l )"
    #el_debug "( $count_msg_fuzzy_v / $count_msg_all_v ) * 100"
    count_percent_fuzzy_v="${count_percent_fuzzy_v%%.*}"
    [[ -z "$count_percent_fuzzy_v" ]] && count_percent_fuzzy_v=0

    #if [[ -z "$count_percent_v" ]] ; then
        #count_percent_v=0
    #fi

    el_debug "COUNTED: $_tr_po | msgid $count_msg_all_v | msgstr $count_msgstr_all_v | fuzzy $count_msg_fuzzy_v | to-translate $count_percent_translate_v % | fuzzy $count_percent_fuzzy_v %"

}
############################################################################
translate_new(){
    el_debug

    local ui_user_answered

    local item_order_v item_order_percent_v item_lang_v tr_name_v tr_version_v tr_package_name_v tr_description_v is_showed_message_upgrade
    el_check_variables "tempfile"
    el_check_dirs "$translating_d"

    if ((is_mode_only_e17)) ; then
        ui_user_answered="Enlightenment 17"

    else
        rm -f "$tempfile"* 2>/dev/null

        #echo -e "Enlightenment 17" >> "$tempfile"
        #echo -e "$( eval_gettext "Basically, your Desktop and Graphical interface/system." )" >> "$tempfile"

        { echo 10 ; sleep 30 ; } \
            | $guitool --progress --text="$( eval_gettext "Counting translated messages..." )" --pulsate &
        pid_guitool_counting=$!

        for item_v in ${translating_d}/elive/*
        do
            if [[ -s "${item_v}/settings" ]]; then
                unset count_percent_fuzzy_v count_percent_translate_v tr_name_v tr_version_v tr_description_v tr_package_name_v item_order_v tr_completed_v tr_sentences_v

                tr_name_v="$( basename "$item_v" )"

                # FIXME: for testing and debug purposes:
                #[[ "$tr_name_v" != "extra-features" ]] && continue

                # ignore deactivated translations
                if ! LC_ALL=C  grep -qs "^enabled:::yes$" "${item_v}/settings" ; then
                    el_debug "note: translation for '${tr_name_v}' is actually deactivated on purpose, not including it..."
                    continue
                fi

                #tr_version_v="$( LC_ALL=C grep "version_min:::" "${item_v}/settings" | tail -1 | awk -v FS=":::" '{print $2}')"
                tr_version_v="$( LC_ALL=C awk -v FS=":::" '{if ($1 == "version_min") print $2 }' "${item_v}/settings" | tail -1 )"
                tr_description_v="$( LC_ALL=C awk -v FS=":::" '{if ($1 == "description") print $2 }' "${item_v}/settings" | tail -1 )"
                tr_package_name_v="$( LC_ALL=C awk -v FS=":::" '{if ($1 == "package_name") print $2 }' "${item_v}/settings" | tail -1 )"


                # checks
                if [[ "${tr_version_v}" -gt "$eltrans_version_v" ]] ; then
                    if ! ((is_showed_message_upgrade)) ; then
                        $guitool --error --text="$( eval_gettext "Some translations require a newer version of eltrans. Please update eltrans." )" &
                        is_showed_message_upgrade=1
                    fi
                    continue
                fi


                # preselect lang files to use
                #[[ -f "$item_v/${LANG%%_*}.po" ]] && item_lang_v="${LANG%%_*}"
                #[[ -f "$item_v/${LANG%%.*}.po" ]] && item_lang_v="${LANG%%.*}"
                item_lang_v="$language_user"


                if [[ -z "$item_lang_v" ]]; then
                    tr_completed_v="NEW language: 0 % completed"

                else
                    # debug purposes:
                    #if [[ "$item_v" = *smb-browser ]] ; then
                        #set -x
                    #fi
                        count_messages_completed "${item_v}/en.po"
                        count_percent_proofread_v="$count_percent_translate_v"

                    count_messages_completed "${item_v}/${item_lang_v}.po"
                    tr_sentences_v="$count_msg_all_v"
                    if [[ -z "$tr_sentences_v" ]] ; then
                        tr_sentences_v="?"
                    fi

                    # reverse value to make it understandable
                    #count_percent_translate_v="$(( 100 - $count_percent_translate_v ))"
                    count_percent_fuzzy_v="$(( 100 - $count_percent_fuzzy_v ))"

                    # fixed needed?
                    if [[ "${count_percent_translate_v}" -gt "100" ]] || [[ "${count_percent_translate_v}" -lt "0" ]] ; then
                        msgmerge --no-wrap -w 20000000 -U "$item_v/${item_lang_v}.po" "$item_v/default.pot" 2>/dev/null 1>&2
                        #mv $item_v/${item_lang_v}.tmp.po $item_v/${item_lang_v}.po
                        count_messages_completed "$item_v/${item_lang_v}.po"
                    fi

                    # Normal description set for different percentages
                    if [[ "$count_percent_proofread_v" -lt 90 ]] ; then
                        if [[ "${item_lang_v}" = "en" ]] ; then
                            tr_completed_v="Requires verifications (${count_percent_proofread_v}% done)"
                        else
                            tr_completed_v="Needs English proofreading (${count_percent_proofread_v}% done)"
                        fi
                        item_order_v=7
                    else

                        if [[ "${count_percent_translate_v}" = "100" ]] && [[ "${count_percent_fuzzy_v}" = "100" ]] ; then
                            tr_completed_v="Completed ${count_percent_translate_v} %"
                            item_order_v=6
                        else
                            if [[ "${item_lang_v}" = "en" ]] ; then
                                tr_completed_v="${count_percent_translate_v}% Verified, ${count_percent_fuzzy_v}% Proofread"
                            else
                                tr_completed_v="${count_percent_translate_v}% Translated (${item_lang_v}), ${count_percent_fuzzy_v}% Proofread"
                            fi

                            item_order_v=3
                        fi
                    fi
                fi


                # fix for correct sorting of the files
                if [[ -n "$tr_completed_v" ]]; then
                    if [[ "$( echo "$count_percent_translate_v" | wc -m )" -le 2 ]] ; then
                        item_order_percent_v="0$count_percent_translate_v"
                    else
                        item_order_percent_v="$count_percent_translate_v"
                    fi
                    if [[ "$( echo "$count_percent_fuzzy_v" | wc -m )" -le 2 ]] ; then
                        item_order_percent2_v="0$count_percent_fuzzy_v"
                    else
                        item_order_percent2_v="$count_percent_fuzzy_v"
                    fi
                    # append to list
                    echo -e "${tr_name_v}\n${tr_sentences_v}\n${tr_completed_v}\n${tr_description_v}" >> "${tempfile}_order_${item_order_v}_${item_order_percent_v}_${item_order_percent2_v}"
                fi

            fi
        done

        echo -e "Cleanups" >> "${tempfile}_order_8_"
        echo -e "-" >> "${tempfile}_order_8_"
        echo -e "$( eval_gettext "Purge, undo or remove" )" >> "${tempfile}_order_8_"
        echo -e "$( eval_gettext "Management of your conflicting translations." )" >> "${tempfile}_order_8_"


        kill "$pid_guitool_counting" 1>/dev/null 2>&1 || true


        ui_user_answered="$( cat ${tempfile}_order_* | $guitool --list --width=840 --height=540 --title="$( eval_gettext "Select an element." )" --text="$( eval_gettext "Select an element that you want to translate or to update in an already existing translation.\nThe first elements in the list are the most needed ones, they are sorted like this on purpose." )" --column="$( eval_gettext "Element" )" --column="$( eval_gettext "Phrases" )" --column="$( eval_gettext "Completion" )" --column="$( eval_gettext "Description" )" || echo cancel )"
        ui_answer_check

        rm -f "$tempfile" ${tempfile}_order_* || true

    fi

    case "$ui_user_answered" in
        "Enlightenment 17")
            translate_e17_new_language
            ;;
        "Cleanups")
            clean_elive_dir
            ;;
        *)
            translate_elive "$translating_elive_d/$ui_user_answered"
            ;;
    esac
}
############################################################################
main(){
    el_debug

    translated_message="$( printf "$( eval_gettext "Select the language variant (locale) that you want to translate to. Your system is actually set to '%s', for example 'pt' for Portuguese or like 'pt_BR' (brazilian portuguese) if you need to translate to a derivative language specifically (only if the main language is not compatible).\n\nIt is strongly recommended to use the short language code, because otherwise your translation does not cover the other variants. Use the long form only if you really want to translate to a specific version of your language\n\nTo improve the original English messages use 'en'." )" "${LANG%%_*}" )"


    [[ -x /usr/bin/xterm ]] && term=xterm
    [[ -x /usr/bin/terminology ]] && term=terminology
    [[ -x /usr/bin/urxvt ]] && term=urxvt
    [[ -z "$term" ]] && term=urxvt

    if [[ -z "$term" ]] ; then
        $guitool --error --text="ERROR: You need to have rxvt-unicode or xterm installed to use this application"
        exit 1
    fi

    if ! el_dependencies_check "zenity" ; then
        el_dependencies_install "zenity"
    fi

    #if ((is_mode_only_e17)) ; then
    #translate_new
    #exit 0
    #fi

    if [[ -f /etc/apt/apt.conf.d/01ubuntu ]] ; then
        $guitool --error --text="Warning: This application doesn't work correctly in ubuntu"
    fi

    # check version
    #if el_package_update_last_version eltrans ; then
    if el_package_upgrade_fast 180 normal "eltrans" ; then
        # remove locks
        rm -f "${logs_err}" "$tempfile"* 2>/dev/null || true
        rm -f "$lockfile"
        # run it again
        "$0" "$@"
        #exit from here
        exit
    fi

    # check internet
    if ! el_verify_internet ; then
        $guitool --error --text="$( eval_gettext "You need an internet connection to translate and to be able to send your translations." )"
    fi

    # get account
    if [[ -s "$preferences_f" ]] ; then
        config_get
    fi

    if ! [[ -n "$pref_pass_cached_v" ]] ; then
        #$guitool --info --text="$( eval_gettext "You need an eltrans account in order to make translations, please create it first" )"
        $guitool --warning --text="$( eval_gettext "To help translating Elive, you need to ask for an account. At the moment you can simply send an email to Thanatermesis to request it. Include in your email the language to which you want to translate, and the username and password you wish to use." )"

        #/etc/alternatives/x-www-browser "https://www.elivecd.org/collaborate" &
        #/etc/alternatives/x-www-browser "https://www.elivecd.org/contact" &
        web-launcher "https://www.elivecd.org/contact" &
        sleep 15

        $guitool --info --text="$( eval_gettext "Enter your username and password after to have created your account." )"
        preferences_edit
    fi


    # We start here

    select_language

    while true
    do
        update_translations
        translate_new
    done

}
############################################################################


main "$@"



# vim: set foldmethod=marker :

