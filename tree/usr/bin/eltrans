#!/bin/bash
# FIXME: do not allow translations when the english is not reviewed yet, at least a minimum (and warning when there's remaining ones)
# FIXME: automatic notification to translators when there's new messages ?
# FIXME: proofreading mode: if the translator has a question, suggest to use xchat for it
# FIXME: check for new versions and request to upgrade (from elive-tools) instead of use a deprecated version
# FIXME: version compatibility ? check the previous line

# FIXME: betatest everything, specially the e17 part

# MIGRATION:
# TODO  COMMENT COMMENT!
# TODO: change yes'es to booleans check
# TODO: improve variablenames and funciontnames
# TODO: do not use $1 (et al) variables
# TODO: read the code searching bugs or bad structure
# TODO: put local variables where is needed, or make them better (search for unset's)
# TODO: check all the variables before to use them
# TODO: add grammar checker tool (directly inside poedit hack? that could be easier to write)

# remove reported issues in github
# TODO: version of eltrans checker / dependency

# TODO: disable e17 or do something, since its not in svn anymore

source /usr/lib/elive-tools/functions
el_make_environment
TEXTDOMAIN="eltrans"
export TEXTDOMAIN


pwd_orig="$(pwd)"
app_poeditor=poeditor
translating_d="$HOME/Projects/translations"
translating_e17_d="${translating_d}/e17"
translating_elive_d="${translating_d}/elive"
translating_e17_worked_d="${translating_e17_d}/my_translations"
preferences_f="$HOME/.eltrans/account"
tempfile="/tmp/.${USER}-eltrans-$$"
logs_err="/tmp/.${USER}-eltrans-log-err"
: ${guitool=zenity}
export guitool
mode_only_e17_v="no" # Warning: This option inhabilite the Elive translators part, set it to "yes" if you want to use this tool ONLY for Enlightenment 17 translations

############################################################################
ui_answer_check(){
    if [[ "$ui_user_answered" = "cancel" ]] ; then
	exit 0
    fi

    if [[ -z "$ui_user_answered" ]] ; then
	$guitool --error --text=$"Result null, please make a better choice"
	main
	exit
    fi
}
############################################################################
exit_error(){
    el_check_files "${logs_err}"

    el_error "$(cat "${logs_err}" )"
    $guitool --error --text="Error: $(cat "${logs_err}" )"
    exit_ok
}
############################################################################
exit_ok(){
    local message
    message="$1"

    if [[ -z "$message" ]] ; then
	$guitool --error --text="$message"
    fi

    rm -f "${logs_err}" "$tempfile"*

    exit 0
}
############################################################################
speller_check(){
    local packagename _lang
    _lang="$1"

    el_check_variables "_lang"

    if ! dpkg -l | grep "myspell-${_lang}" | grep -q "^ii" ; then
	if $guitool --question --text=$"In order to make correct translations you are required to have the package 'myspell-${_lang}' installed in your system, it marks words in RED which may be wrong\n\nPress Ok to automatically install it now" ; then
	    ui_user_answered="$( apt-cache search myspell-${_lang} | grep "^myspell" | $guitool --list --text=$"Select the appropriate dictionary package from this list." --column=$"Package" || echo cancel )"

	    if [[ -n "$ui_user_answered" ]] && [[ "$ui_user_answered" != "cancel" ]] ; then
		packagename="$(echo "$ui_user_answered" | awk '{print $1}')"
		el_dependencies_install "$packagename"
		#gksu "$term -hold -e bash -c \"apt-get update && apt-get install -y ${packagename} && echo -e '\n\nFinished, close the window' \" "
	    fi
	else
	    notify-send -t 6000 $"Warning: Not using speller"
	fi
    fi
}

############################################################################
preferences_edit(){
    local newpass newuser
    el_check_variables "preferences_f"

    mkdir -p "${preferences_f%/*}"
    touch "$preferences_f"

    pref_user_cached_v="$( cat "$preferences_f" | grep username | sed 's/^.*:://g' )"
    pref_user_cached_v="$( cat "$preferences_f" | grep password | sed 's/^.*:://g' )"

    $guitool --info --text=$"To collaborate with Elive making translations, you need to create yourself an account in http://www.elivecd.org/Help/Collaborate\n\nThanks a lot for your collaboration"
    ui_user_answered="$( $guitool --entry --title=$"Elive Translator Account" --text=$"Enter the Username of your Elive translator account" --entry-text="$pref_user_cached_v" || echo cancel )"
    ui_answer_check
    newuser="$ui_user_answered"

    ui_user_answered="$( $guitool --entry --title=$"Elive Translator Account" --text=$"Enter the Password of your Elive translator account" --entry-text="$pref_user_cached_v" || echo cancel )"
    ui_answer_check
    newpass="$ui_user_answered"

    el_check_variables "newuser,newpass"
    echo -e "username::${newuser}\npassword::${newpass}" > "$preferences_f"
}
############################################################################
translate_elive(){
    local is_base_translation_avail _tr_app_d
    _tr_app_d="$1"
    el_check_variables "_tr_app_d"

    if ! el_check_dirs "$_tr_app_d" ; then
	$guitool --warning --text=$"The directory ${_tr_app_d} does not exist"
	translate_new
	exit 0
    fi

    cd "$_tr_app_d"

    $guitool --info --text=$"Important: You can also do translations in English. The English translations are the most important ones because it is the standard one where all the other translations come from, so it is imperitive they are correctly written (not in the <b>Tarzanic English</b> of the developer). In order to do English translations simply use the '<b>en</b>' value."

    ui_user_answered="$( $guitool --entry --entry-text="${LANG%%_*}" --title=$"Select Language" --text=$"Select the language variant (locale) that you want to translate to, your system are using now the '${LANG%%_*}' value, but you can use a more specific language like 'pt__BR' for the brazilian variant of portuguese language.\n\nWe recommends <b>sincerely</b> to just use short value because if not, your translation don't cover the rest of variants, use the long form only if you really want to made a specific version of your translation, so, for you: '${LANG%%_*}'\n\nNote: You can do translations <b>to Englighs</b> too (clean English) using the 'en' value" || echo cancel )"

    ui_answer_check
    language_user="$ui_user_answered"

    el_check_variables "language_user"
    verify_locale_supported "$language_user" translate_elive

    speller_check "$language_user"

    mkdir -p "$_tr_app_d/tmp"

    if [[ -f "$_tr_app_d/${language_user%%_*}.pot" ]] ; then
	cp "$_tr_app_d/${language_user%%_*}.pot" "$_tr_app_d/tmp/base_translation.pot"
	is_base_translation_avail=1
    fi

    if [[ -f "$_tr_app_d/${language_user}.pot" ]] ; then
	cp "$_tr_app_d/${language_user}.pot" "$_tr_app_d/tmp/base_translation.pot"
	is_base_translation_avail=1
    fi

    if ((is_base_translation_avail)) ; then
	msgmerge -o "$_tr_app_d/${language_user}.pot" "$_tr_app_d/tmp/base_translation.pot" "$_tr_app_d/default.pot"
    else
	xgettext -s --language=PO --foreign-user --from-code utf-8 -o "$_tr_app_d/${language_user}.pot" "$_tr_app_d/default.pot"
    fi

    sed -i '/Content-Type/s/charset=.*$/charset=utf-8\\n"/' "$_tr_app_d/${language_user}.pot"

    rm -rf "$_tr_app_d/tmp"

    count_messages_completed "$_tr_app_d/${language_user}.pot"

    if [[ "$fuzzy_msgs_v" -ge "10" ]] ; then
	notify-send -t 100000 $"Eltrans: If you've got messages that need an update (FUZZY) but they are correctly translated, you can press the cloud icon."" "$"(or the Alt + U key)"
    else
	notify-send -t 100000 $"Tip: For moving more faster to the next message, press TAB, the down-arrow, and TAB again"
    fi

    el_check_variables "app_poeditor"
    "$app_poeditor" "$_tr_app_d/${language_user}.pot"

    rm -f "$_tr_app_d/${language_user}.mo"

    # TODO: improve that crap
    translation_elive_install "$( basename $_tr_app_d )" "$_tr_app_d/${language_user}.pot" "$language_user"
    commit_changes_elive "$( basename $_tr_app_d )" "${language_user}.pot" "$_tr_app_d" "${language_user}"
}
############################################################################
translation_elive_install(){
    local _tr_app _tr_pot _tr_lang
    _tr_app="$1"
    _tr_pot="$2"
    _tr_lang="$3"

    el_check_variables "_tr_lang,_tr_pot,_tr_app"
    el_check_files "${_tr_pot}"

    if $guitool --question --text=$"Do you want to use your translation in your system now ?" ; then

	if ! [[ -d "/usr/share/locale/${_tr_lang%%.*}/LC_MESSAGES" ]] ; then
	    gksu "mkdir -p /usr/share/locale/${_tr_lang%%.*}/LC_MESSAGES"
	fi

	if gksu "msgfmt ${_tr_pot} -o /usr/share/locale/${_tr_lang%%.*}/LC_MESSAGES/${_tr_app}.mo" ; then
	    $guitool --info --text=$"Your translation is installed in your system, you can use it now"
	else
	    $guitool --error
	fi
    fi
}
############################################################################
commit_changes_elive(){
    local _tr_app _tr_pot _tr_lang
    _tr_app="$1"
    _tr_pot_f="$2"
    _tr_app_d="$3"
    _tr_lang="$4"

    el_check_variables "_tr_pot_f"
    el_check_files "$_tr_pot_f"

    if ! $guitool --question --text=$"Do you want to automatically send your translation to Elive that all the users can profit of your collaboration having its systems directly using your nice translation ?\n\nJust create yourself an account at http://www.elivecd.org/Help/Collaborate\n\nIf you don't send it you can have a conflict with your translation made and the possible new version in the server. So it is recommended to send the translations as fast as possible after to edit them (max. one hour aprox.), do not wait to continue after with them, just send it and you can run again eltrans later to continue with a non-finished translation\n\nNote: For that is needed to use a correct grammar and verify all the messages before to send them" ; then
	return
    fi

    if ! el_check_files "$preferences_f" ; then
	preferences_edit
    fi

    pref_user_cached_v="$( cat "$preferences_f" | grep username | sed 's/^.*:://g' )"
    pref_user_cached_v="$( cat "$preferences_f" | grep password | sed 's/^.*:://g' )"

    [[ -z "$pref_user_cached_v" ]] && preferences_edit
    [[ -z "$pref_user_cached_v" ]] && preferences_edit

    cd "$_tr_app_d"

    # TODO: dont use static names, use a generic variable
    rm -f "/tmp/translation.mo"

    #$guitool --question --text=$"Eltrans has generated a translated test file, we recommend you to check their statistics because it shows all the errors, warnings, and wrong parts of your translation, these statistics contains the number of the lines that has your translation file in '${3}/${2}', if you found important errors that needs to be fixed, we recommend to run again eltrans and do again a translation for the same element fixing these problems.\n\nDo you want to view the Statistics ?" && {
    msgfmt -f -v --statistics -c "$_tr_pot_f" -o /tmp/translation.mo 2>&1 \
	| grep -v "^msgfmt: " \
	| grep -v "msgid.*msgstr.*\"\\\n\"$" \
	| grep -v ":6: " \
	| grep "\.pot:" \
	> "/tmp/.${USER}-eltrans-logs"

    # TODO: dont use static names, use a generic variable
    if [[ -s "/tmp/.${USER}-eltrans-logs" ]] ; then
	cat "/tmp/.${USER}-eltrans-logs" | $guitool --text-info --width=650 --height=400 &
    fi

    if [[ -s "/tmp/.${USER}-eltrans-logs" ]]; then
	$guitool --info --text=$"I have found Warnings or Errors in your translation, please read them carefully and try to fix the problem manually. You've got a window open with the details of these errors. These messages include in the first field the exact number of the line of the problem. Enable line-number visualization in the editor if it is not enabled."

	scite "$_tr_pot_f"
    fi
    #}

    # TODO: dont use static names, use a generic variable
    rm -f "/tmp/translation.mo" "/tmp/.${USER}-eltrans-logs"

    svn add "${_tr_pot_f}"  2>/dev/null || true

    for blklisted in "$( curl http://main.elivecd.org/tmp/blklisted-translators 2>/dev/null )"
    do
	[[ "$pref_user_cached_v" = "$blklisted" ]] && is_blklist=1
    done

    if ((is_blklist)) ; then
	$term -e bash -c "sleep 1"
	$guitool --info --text="Translation sent sucessfully, Thanks a lot for your collaboration, it can be reviewed soon and included directly on Elive the next time."

    else
	$term -e bash -c "if svn commit --no-auth-cache --username \"$pref_user_cached_v\" --password \"$pref_user_cached_v\" -m \"Eltrans auto:  |${_tr_app}|  in  |${_tr_lang}|  by '$( awk -v var="$pref_user_cached_v" "BEGIN {print tolower(var)}" )'\" ; then sleep 1 ; $guitool --info --text=\"Translation sent sucessfully, Thanks a lot for your collaboration, it can be reviewed soon and included directly on Elive the next time. You can check it directly at http://dev.elivecd.org/timeline, apart to use the features of the site like watch other translations, diff them, recover an old translation, etc...\" ; else $guitool --error --text=\"Error sending your translation, if you are using a Wrong Username or Password for the send please remove the file $preferences_f, otherwise the better solution is to remove your full translations project dir $translating_elive_d and run the 'clean' or 'purge' option of eltrans. You can backup before your translated file and compare it with the 'meld' tool \" ; fi"

    fi

    update_translations
    translate_new
}
############################################################################
add_translations_dir_e17(){
    el_check_variables "translating_d,translating_e17_worked_d"

    mkdir -p "${translating_d}"
    cd "$translating_d"

    rm -rf e
    rm -rf "$translating_e17_d" 2>/dev/null

    $term -e bash -c "echo 'Download Enlightenment 17 sources...' ; svn co http://svn.enlightenment.org/svn/e/trunk/e || sleep 6"

    mkdir -p "$translating_e17_d"
    mv e "$translating_e17_d/svn"

    mkdir -p "$translating_e17_worked_d"
}
############################################################################
add_translations_dir_elive(){
    el_check_variables "translating_d"

    mkdir -p "$translating_d"
    cd "$translating_d"
    rm -rf elive

    $term -e bash -c "echo 'Downloading translations...' ; svn --no-auth-cache --username anonymous --password anonymous co svn://elivecd.org/translations elive || { sleep 6 ; $guitool --error --text=\"Error downloading the translations of Elive, please try again later or remove your directory Projects/translations\" ; } "

}
############################################################################
update_translations(){
    local conflicted_file_f

    #deprecated(){ # FIXME: remove
    if ! el_verify_internet ; then
	exit_ok $"You need an internet connection in order to make translations"
    fi

    if [[ -d "$translating_e17_d" ]] && [[ -d "$translating_e17_d/svn" ]] && [[ -d "$translating_e17_worked_d" ]] ; then
	cd "$translating_e17_d/svn"
	$term -e bash -c "echo 'Updating...' ; svn update || { svn cleanup ; svn update || sleep 10 ; } "
    else

	add_translations_dir_e17
    fi

    if ! [[ "$mode_only_e17_v" = "yes" ]] ; then
	if [[ -d "$translating_d/elive" ]] ; then

	    cd "${translating_d}/elive"

	    # TODO: dont use static names, use a generic variable
	    rm -rf "/tmp/${USER}-translations-eltrans"
	    cp -r "${translating_d}/elive" "/tmp/${USER}-translations-eltrans"

	    $term -e bash -c "echo 'Cleaning...' ; svn cleanup "
	    # TODO: dont use static names, use a generic variable
	    $term -e bash -c "echo 'Updating...' ; svn update --no-auth-cache --username anonymous --password anonymous --accept theirs-full 2>&1 | tee /tmp/.${USER}-eltrans-logs "

	    if ! svn update ; then
		# clean it up if something has failed
		cd ../../
		add_translations_dir_elive
	    fi

	    if grep -q "^G " /tmp/.${USER}-eltrans-logs ; then

		conflicted_file_f="$( grep "^G " /tmp/.${USER}-eltrans-logs | awk '{print $2}' | tr '\n' ' ')"

		$guitool --warning --text=$"IMPORTANT: There is an update of the file '${conflicted_file_f}' that conflicts with your version. It will be removed so eltrans will work correctly, but if you have an old translation that you don't want to lose, you will have to make a backup of this file to /tmp/${USER}-translations-eltrans. Then you should close eltrans, install the 'meld' package, and compare this file with the actual one in ${translating_d}. Run eltrans again with your updated file and commit the translation if needed. If you don't care about this old file, just ignore this message and continue."
		unset conflicted_file_f
	    fi

	    rm -f "/tmp/.${USER}-eltrans-logs"
	else
	    add_translations_dir_elive
	fi
    fi
    #} # FIXME: remove

    el_check_dirs "$translating_d"
    cd "${translating_d}"

    xgettext -C --foreign-user -k -k_ -kd_ -kD_ -o enlightenment.pot "$(find "${translating_e17_d}/svn" -name "*.[ch]" -print)" -p "$translating_e17_worked_d" --from-code utf-8

    el_check_dirs "$pwd_orig"
    cd "$pwd_orig"
}
############################################################################
translate_e17_new_language(){
    local is_base_translation_avail edited
    el_check_dirs "${translating_e17_d}"

    cd "${translating_e17_d}"

    ui_user_answered="$( $guitool --entry --entry-text="${LANG%%_*}" --title=$"Select Language" --text=$"Select the language variant (locale) that you want to translate to, your system are using now the '${LANG%%_*}' value, but you can use a more specific language like 'pt__BR' for the brazilian variant of portuguese language.\n\nWe recommends <b>sincerely</b> to just use short value because if not, your translation don't cover the rest of variants, use the long form only if you really want to made a specific version of your translation\n\nNote: You can do translations to english too (clean english) using the 'en' value" || echo cancel )"

    ui_answer_check
    language_user="$ui_user_answered"

    verify_locale_supported "$language_user" translate_e17_new_language
    speller_check "$language_user"

    if [[ -f "$translating_e17_worked_d/${language_user}.pot" ]] ; then
	ui_user_answered="$( $guitool --list --text=$"Old translation found. Select an option:" --column="" --column=$"Option" 1 $"Edit a previously made translation" 2 $"Remove it and create a new one" || echo cancel )"
	ui_answer_check

	case "$ui_user_answered" in
	    1)
		#mv $translating_e17_worked_d/${language_user}.pot $translating_e17_worked_d/${language_user}.old.pot
		msgmerge -U "$translating_e17_worked_d/${language_user}.pot" "$translating_e17_worked_d/enlightenment.pot"
		#rm $translating_e17_worked_d/${language_user}.old.pot

		$app_poeditor "$translating_e17_worked_d/${language_user}.pot"

		if ! grep -iq "Elive Translation tool" "$translating_e17_worked_d/${language_user}.pot" ; then
		    sed -i "3a# \n# This translation was created/edited with the Elive translation tool" "$translating_e17_worked_d/${language_user}.pot"
		fi

		edited=1
		;;
	    2)
		rm -f "$translating_e17_worked_d/${language_user}.pot"

		;;
	esac
    fi

    if ! ((edited)) ; then

	mkdir -p "$translating_e17_worked_d/tmp"

	if [[ -f "${translating_e17_d}/svn/po/${language_user%%_*}.po" ]] ; then
	    cp "${translating_e17_d}/svn/po/${language_user%%_*}.po" "$translating_e17_worked_d/tmp/base_translation.po"
	    is_base_translation_avail=1
	fi
	if [[ -f "${translating_e17_d}/svn/po/${language_user}.po" ]] ; then
	    cp "${translating_e17_d}/svn/po/${language_user}.po" "$translating_e17_worked_d/tmp/base_translation.po"
	    is_base_translation_avail=1
	fi

	if ((is_base_translation_avail)) ; then
	    msgmerge -o "$translating_e17_worked_d/${language_user}.pot" "$translating_e17_worked_d/tmp/base_translation.po" "$translating_e17_worked_d/enlightenment.pot"
	else
	    cp "$translating_e17_worked_d/enlightenment.pot" "$translating_e17_worked_d/${language_user}.pot"
	fi

	rm -rf "$translating_e17_worked_d/enlightenment.pot" "$translating_e17_worked_d/tmp"

	$app_poeditor "$translating_e17_worked_d/${language_user}.pot"

	if ! grep -iq "Elive Translation tool" "$translating_e17_worked_d/${language_user}.pot" ; then
	    sed -i "3a# \n# This translator was created/edited with the Elive translation tool" "$translating_e17_worked_d/${language_user}.pot"
	fi
    fi

    rm -f "$translating_e17_worked_d/${language_user}.mo"

    translation_e17_install "$translating_e17_worked_d/${language_user}.pot"
}
############################################################################
translation_e17_install(){
    local _translated_pot
    _translated_pot="$1"
    el_check_variables "_translated_pot"

    if $guitool --question --text=$"Do you want to try your translation now ?" ; then

	if ! [[ -d /usr/share/locale/${language_user%%.*}/LC_MESSAGES ]] ; then
	    gksu "mkdir -p /usr/share/locale/${language_user%%.*}/LC_MESSAGES"
	fi

	gksu "msgfmt \"${_translated_pot}\" -o /usr/share/locale/${language_user%%.*}/LC_MESSAGES/enlightenment.mo"

	enlightenment_remote -restart 2>/dev/null 1>&2

	sleep 6
    fi

    $guitool --info --title=$"Send your translation" --text=$"Now, you need to send your translation(s) to Enlightenment 17 developers, for that, you need to send it via email to the enlightenment-intl mailing list.\n\nYour Enlightenment 17 Translation files are located in your $translating_e17_worked_d directory\n\nPress Continue to be redirected to the mailing list suscription on your web-browser.\n\nAdd a small description to the email like the language translated and the possible variant, the Operating-System, your country, and your locales value, your one is: $LANG"

    if ! /etc/alternatives/x-www-browser https://lists.sourceforge.net/lists/listinfo/enlightenment-intl 2>/dev/null 1>&2 ; then
	# do something?
	true
    fi
}
############################################################################
verify_locale_supported(){
    local _tr_lang _function_extra
    _tr_lang="$1"
    _function_extra="$2"

    el_check_variables "_function_extra,_tr_lang"

    if ! cat "/usr/share/i18n/SUPPORTED" | tr '.' ' ' | tr '@' ' ' | awk '{print $1}' | grep -q "${_tr_lang}"  ; then
	$guitool --error --text=$"Error: The language you selected is not supported on your system, here are some examples:""
	$( cat /usr/share/i18n/SUPPORTED | tr '.' ' ' | tr '@' ' ' | awk '{print $1}' | grep ${_tr_lang%%_*} )"

	"$_function_extra"
    fi
}
############################################################################
clean_elive_dir(){
    ui_user_answered="$( $guitool --list --text=$"Select the option to remove your full translations directory or revert a previous commit (Important: If you have sent a wrong translation, you need to select this option)" --column=$"Option" --column=$"Description" "Purge" $"This option removes your full directory with your translations." "Revert" $"This option is to revert a wrongly sent translation." || echo cancel )"
    ui_answer_check

    case "$ui_user_answered" in
	"Purge")
	    rm -rf "$preferences_f"

	    if $guitool --question --text=$"You are going to remove your translations directory (not the Enlightenment 17 translations). This will remove all the translations that you have not sent or installed. If you like, do a backup of your '${translating_elive_d}' directory first, and after that, continue." ; then
		rm -rf "$translating_elive_d"
	    fi

	    main
	    ;;
	"Revert")
	    $guitool --info --text=$"If you have made a wrong translation and sent it to Elive, the best way to correct this is: First of all, go to http://dev.elivecd.org , you need to login, then click on 'timeline' to see the latest changes, if you click on the commit number you can see the real changes made (visually), if it is wrong, search a previous (correct) commit, so click on 'Previous Changeset', now you are in the previous change made, if it is ok, remember the revision number (because it's the correct one that you need to use after) and click to the single file link (in the left part, in the details of the changeset) or search it in 'Browse source' tab, when you are on this page, be sure that it's the correct revision and go to the bottom of the page and click to the link 'Download in Original Format', when you have it you just need to replace your local file (normally in ${translating_elive_d}) with this one and from this directory, run the commant: svn commit -m 'reverting to old version'"

	    main
	    ;;
    esac

}
############################################################################
## nobody uses that function? better to comment it then
#translation_edit(){
    #$app_poeditor "$1"

    #if ! grep -iq "Elive Translation tool" "$1" ; then
	#sed -i "3a# \n# This translator was created/edited with the Elive translation tool" "$1"
    #fi

    #translation_e17_install "$1"
#}
############################################################################
count_messages_completed(){
    # Well, somebody should document this function, it gives me a few headaches to think on it and I dont have time for it right now :P
    local is_count_less_than count_msg_all_v count_msg_all_null_v count_msg_no_v count_msg_no_null_v
    local _tr_pot _item
    _tr_pot="$1"
    _item="$2"

    el_check_variables "_tr_pot"
    el_check_files "$_tr_pot"

    unset fuzzy_msgs_v count_percent_v

    count_msg_all_v="$( cat "$_tr_pot" | egrep "^msgid" | wc -l )"

    #count_msg_all_null_v=$( cat "$_tr_pot" | egrep "^msgid" | grep "msgid \"\"" | wc -l )
    count_msg_all_null_v="$(cat "$_tr_pot" | awk '{if(prev=="msgid \"\"" && $0==""){count++};prev=$0}END{print count}' )"

    #count_msg_all_v=$( cat "$_item/default.pot" | egrep "^msgid" | wc -l ) # deprecated way: there's a merge if >= 100
    #count_msg_all_null_v=$( cat "$_item/default.pot" | egrep "^msgid" | grep "msgid \"\"" | wc -l )

    if [[ -z "$count_msg_all_null_v" ]] ; then
	count_msg_all_null_v=0
    fi

    count_msg_no_v="$( cat "${_tr_pot}" | egrep "^msgstr" | wc -l )"

    #count_msg_no_null_v=$( cat "${_tr_pot}" | egrep "^msgstr" | grep "msgstr \"\"" | wc -l )
    count_msg_no_null_v="$( cat "${_tr_pot}" | awk '{if(prev=="msgstr \"\"" && $0==""){count++};prev=$0}END{print count}' )"

    [[ -z "$count_msg_no_null_v" ]] && count_msg_no_null_v=0

    count_percent_v="$( echo -e "( ( $count_msg_no_v - $count_msg_no_null_v ) / ( $count_msg_all_v - $count_msg_all_null_v ) ) * 100" | bc -l )"

    if [[ "$(( $count_msg_all_v - $count_msg_all_null_v ))" -gt "$(( $count_msg_no_v - $count_msg_no_null_v ))" ]] ; then
	is_count_less_than=1
    fi

    count_percent_v="${count_percent_v%%.*}"

    if [[ "$count_percent_v" = "100" ]] && ((is_count_less_than)) ; then
	count_percent_v=99
    fi

    fuzzy_msgs_v="$( cat "$_tr_pot" | awk -v FS="\n" -v RS="" '{ if ($1 == "#, fuzzy") if ($2 ~ "^msgid ") print $1 }' | wc -l )"
}
############################################################################
translate_new(){
    local item_order_v item_lang_v tr_name_v tr_description_v
    el_check_variables "tempfile"
    el_check_dirs "$translating_d"

    if [[ "$mode_only_e17_v" = "yes" ]] ; then
	ui_user_answered="Enlightenment 17"

    else
	rm -f "$tempfile"* 2>/dev/null

	echo -e "Clean" >> "$tempfile"
	echo -e $"Remove your Translations Directory, avoiding possible Errors or Conflicts." >> "$tempfile"

	#echo -e "Enlightenment 17" >> "$tempfile"
	#echo -e $"Basically, your Desktop and Graphical interface/system." >> "$tempfile"

	for item_v in ${translating_d}/elive/*
	do
	    if [[ -d "$item_v" ]]; then
		unset count_percent_v

		tr_name_v="$( basename $item_v )"
		tr_description_v="$( cat "$item_v/description.txt" 2>/dev/null | head -1 )"

		if [[ -n "$tr_description_v" ]]; then

		    [[ -f "$item_v/${LANG%%_*}.pot" ]] && item_lang_v="${LANG%%_*}"
		    [[ -f "$item_v/${LANG%%.*}.pot" ]] && item_lang_v="${LANG%%.*}"


		    if [[ -z "$item_lang_v" ]]; then
			tr_description_v=$"NEW: ${tr_description_v} - 0 % completed"

		    else
			count_messages_completed "$item_v/${item_lang_v}.pot" "$item_v"

			if [[ "${count_percent_v}" -ge "100" ]] ; then
			    msgmerge -U "$item_v/${item_lang_v}.pot" "$item_v/default.pot" 2>/dev/null 1>&2
			    #mv $item_v/${item_lang_v}.tmp.pot $item_v/${item_lang_v}.pot
			    count_messages_completed "$item_v/${item_lang_v}.pot" "$item_v"
			fi
			# Normal description set for different percentages
			if [[ "${count_percent_v}" = "100" ]] ; then
			    tr_description_v=$"- Completed - Translation is not needed in the '${item_lang_v}' language."
			    item_order_v=8
			else
			    tr_description_v="${tr_description_v} - ${count_percent_v} %"$" completed (${item_lang_v})"
			    item_order_v=2
			fi
			# If is fuzzy
			if [[ "$fuzzy_msgs_v" -ge "1" ]] && [[ "$count_percent_v" = "100" ]] ; then
			    tr_description_v=$"Needs ${fuzzy_msgs_v} updates (${item_lang_v}) "
			    item_order_v=4
			fi
		    fi


		    if [[ -n "$tr_description_v" ]]; then
			echo -e "${tr_name_v}\n${tr_description_v}" >> "${tempfile}_order_${item_order_v}"
		    fi

		fi
	    fi
	done

	el_check_files "$tempfile"
	ui_user_answered="$( cat "$tempfile" ${tempfile}_order_* | $guitool --list --width=600 --height=460 --title=$"Select an Element." --text=$"Select one element that you want to translate or to update in an existing translation\n\nNote: If the percent value is not 100 but it is fully translated,\nthis may be due to errors like incorrectly written codes (like '\\\ n')\n" --column=$"Element" --column=$"Description" || echo cancel )"
	ui_answer_check

	rm -f "$tempfile" ${tempfile}_order_*

    fi

    case "$ui_user_answered" in
	"Enlightenment 17")
	    translate_e17_new_language
	    ;;
	"Clean")
	    clean_elive_dir
	    ;;
	*)
	    translate_elive "$translating_elive_d/$ui_user_answered"
	    ;;
    esac
}
############################################################################
main(){
    [[ -x /usr/bin/xterm ]] && term=xterm
    [[ -x /usr/bin/terminology ]] && term=terminology
    [[ -x /usr/bin/urxvt ]] && term=urxvt
    [[ -z "$term" ]] && term=urxvt

    if [[ -z "$term" ]] ; then
	$guitool --error --text="ERROR: You need to have rxvt-unicode or xterm installed to use this application"
	exit 1
    fi

    if ! el_dependencies_check "poedit,svn,zenity,xgettext,scite" ; then
	el_error "Missing dependencies"
	exit 1
    fi

    # replace all the "yes'ess" to bool check
    if [[ "$mode_only_e17_v" = "yes" ]] ; then
	translate_new
	exit 0
    fi

    if [[ -f /etc/apt/apt.conf.d/01ubuntu ]] ; then
	$guitool --error --text=$"Warning: This application doesn't work correctly in ubuntu"
    fi

    if el_package_newer_check eltrans ; then
	$guitool --info --text=$"There is a newer version of eltrans, please update it"
    fi

    update_translations

    translate_new

}
############################################################################
#echo -e $"This is just a test message to see if that message translated works, ignore it"

if ! [[ -f "$preferences_f" ]] ; then
    $guitool --info --text=$"You don't have any account configured for eltrans yet, you can create yourself an account at:"" http://www.elivecd.org/Help/Collaborate \n\n"$"You can enter your account information when you send your translation."
fi

main "$@"

exit_ok


